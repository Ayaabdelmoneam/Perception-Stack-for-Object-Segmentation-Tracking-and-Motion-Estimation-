// Generated by gencpp from file perception_stack_pkg/TrackedObject.msg
// DO NOT EDIT!


#ifndef PERCEPTION_STACK_PKG_MESSAGE_TRACKEDOBJECT_H
#define PERCEPTION_STACK_PKG_MESSAGE_TRACKEDOBJECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace perception_stack_pkg
{
template <class ContainerAllocator>
struct TrackedObject_
{
  typedef TrackedObject_<ContainerAllocator> Type;

  TrackedObject_()
    : x1(0)
    , y1(0)
    , x2(0)
    , y2(0)
    , id(0)
    , class_name()  {
    }
  TrackedObject_(const ContainerAllocator& _alloc)
    : x1(0)
    , y1(0)
    , x2(0)
    , y2(0)
    , id(0)
    , class_name(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _x1_type;
  _x1_type x1;

   typedef int32_t _y1_type;
  _y1_type y1;

   typedef int32_t _x2_type;
  _x2_type x2;

   typedef int32_t _y2_type;
  _y2_type y2;

   typedef int32_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _class_name_type;
  _class_name_type class_name;





  typedef boost::shared_ptr< ::perception_stack_pkg::TrackedObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_stack_pkg::TrackedObject_<ContainerAllocator> const> ConstPtr;

}; // struct TrackedObject_

typedef ::perception_stack_pkg::TrackedObject_<std::allocator<void> > TrackedObject;

typedef boost::shared_ptr< ::perception_stack_pkg::TrackedObject > TrackedObjectPtr;
typedef boost::shared_ptr< ::perception_stack_pkg::TrackedObject const> TrackedObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_stack_pkg::TrackedObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_stack_pkg::TrackedObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception_stack_pkg::TrackedObject_<ContainerAllocator1> & lhs, const ::perception_stack_pkg::TrackedObject_<ContainerAllocator2> & rhs)
{
  return lhs.x1 == rhs.x1 &&
    lhs.y1 == rhs.y1 &&
    lhs.x2 == rhs.x2 &&
    lhs.y2 == rhs.y2 &&
    lhs.id == rhs.id &&
    lhs.class_name == rhs.class_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception_stack_pkg::TrackedObject_<ContainerAllocator1> & lhs, const ::perception_stack_pkg::TrackedObject_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception_stack_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::perception_stack_pkg::TrackedObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_stack_pkg::TrackedObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_stack_pkg::TrackedObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_stack_pkg::TrackedObject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_stack_pkg::TrackedObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_stack_pkg::TrackedObject_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_stack_pkg::TrackedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "73c12326598bea7630bfaab0140815ff";
  }

  static const char* value(const ::perception_stack_pkg::TrackedObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x73c12326598bea76ULL;
  static const uint64_t static_value2 = 0x30bfaab0140815ffULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_stack_pkg::TrackedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_stack_pkg/TrackedObject";
  }

  static const char* value(const ::perception_stack_pkg::TrackedObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_stack_pkg::TrackedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 x1 \n"
"int32 y1\n"
"int32 x2\n"
"int32 y2\n"
"int32 id\n"
"string class_name\n"
;
  }

  static const char* value(const ::perception_stack_pkg::TrackedObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_stack_pkg::TrackedObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.x2);
      stream.next(m.y2);
      stream.next(m.id);
      stream.next(m.class_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackedObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_stack_pkg::TrackedObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_stack_pkg::TrackedObject_<ContainerAllocator>& v)
  {
    s << indent << "x1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y1);
    s << indent << "x2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y2);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "class_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.class_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_STACK_PKG_MESSAGE_TRACKEDOBJECT_H
